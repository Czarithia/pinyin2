def Conv2D(N_CLASSES=56, SR=16000, DT=1.0):
    input_shape = (int(SR*DT), 1)
    i = get_melspectrogram_layer(input_shape=input_shape,
                                 n_mels=128,
                                 pad_end=True,
                                 n_fft=512,
                                 win_length=400,
                                 hop_length=160,
                                 sample_rate=SR,
                                 return_decibel=True,
                                 input_data_format='channels_last',
                                 output_data_format='channels_last')
    x = LayerNormalization(axis=2, name='batch_norm')(i.output)
    x = layers.Conv2D(16, kernel_size=(7,7), activation='tanh', padding='same', name='td_conv2d_tanh')(x)
    x = layers.MaxPooling2D(pool_size=(2,2), padding='same', name='max_pool_2d_1')(x)
    x = layers.Conv2D(32, kernel_size=(5,5), activation='relu', padding='same', name='conv2d_relu_2')(x)
    x = layers.MaxPooling2D(pool_size=(2,2), padding='same', name='max_pool_2d_6')(x)
    x = layers.Conv2D(32, kernel_size=(3,3), activation='relu', padding='same', name='conv2d_relu_3')(x)
    x = layers.MaxPooling2D(pool_size=(2,2), padding='same', name='max_pool_2d_2')(x)
    x = layers.Conv2D(64, kernel_size=(3,3), activation='relu', padding='same', name='conv2d_relu_4')(x)
    x = layers.AveragePooling2D(pool_size=(2,2), padding='same', name='max_pool_2d_7')(x)
    x = layers.Conv2D(64, kernel_size=(3,3), activation='relu', padding='same', name='conv2d_relu_5')(x)
    x = layers.MaxPooling2D(pool_size=(2,2), padding='same', name='max_pool_2d_3')(x)
    x = layers.Conv2D(128, kernel_size=(3,3), activation='relu', padding='same', name='conv2d_relu_6')(x)
    x = layers.MaxPooling2D(pool_size=(2,2), padding='same', name='max_pool_2d_4')(x)
    x = layers.Conv2D(128, kernel_size=(3,3), activation='relu', padding='same', name='conv2d_relu_7')(x)
    x = layers.MaxPooling2D(pool_size=(2,2), padding='same', name='max_pool_2d_5')(x)
    x = layers.Dropout(rate=0.3, name='dropout2')(x)
    x = layers.Flatten(name='flatten')(x)
    x = layers.Dense(128, activation='relu', activity_regularizer=l2(0.001), name='dense2')(x)
    o = layers.Dense(N_CLASSES, activation='softmax', name='softmax')(x)
    model = Model(inputs=i.input, outputs=o, name='2d_convolution')
    model.compile(optimizer='adam',
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])
    for layer in model.layers:
        print(f"Layer: {layer.name}, Shape: {[w.shape for w in layer.get_weights()]}")
    model.summary()
    return model
